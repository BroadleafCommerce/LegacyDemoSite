<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd">

    <task:annotation-driven />

    <!-- Set up Broadleaf messaging -->
    <bean id="messageSource" class="org.broadleafcommerce.common.util.BroadleafMergeResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:messages</value>
            </list>
        </property>
    </bean>
    
    <!-- Delete this bean to enable caching - leaving it on for development is recommended -->
    <!-- as it will allow changes made in the admin or directly on the database to be reflected -->
    <!-- immediately. However, caching is obviously beneficial in production. -->
    <bean id="blMergedCacheConfigLocations-site" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>classpath:bl-override-ehcache.xml</value>
            </list>
        </property>
    </bean>
    <bean class="org.broadleafcommerce.common.extensibility.context.merge.EarlyStageMergeBeanPostProcessor">
        <property name="collectionRef" value="blMergedCacheConfigLocations-site"/>
        <property name="targetRef" value="blMergedCacheConfigLocations"/>
    </bean>
    
    <!-- Delete this section to disable the embedded solr search service. Although this will result in a smaller -->
    <!-- application footprint, it will default the search service to use the database implementation, which  -->
    <!-- is slower and less full-featured. Broadleaf suggests maintaining this solr implementation in the vast -->
    <!-- majority of cases. -->
    <bean id="solrEmbedded" class="java.lang.String">
        <constructor-arg value="solrhome"/>
    </bean>

    <!--A simple quartz jobs for enabling cart and customer purge functionality. Uncomment the following quartz configurations-->
    <!--to activate this functionality (Also, uncomment the 'purgeCartTrigger' and 'purgeCustomerTrigger' configured under SchedulerFactoryBean.-->
    <!--Note, you can edit the configuration to customize the functionality. Take a look-->
    <!--at PurgeCartVariableNames and PurgeCustomerVariableNames for a list of available params and ResourcePurgeService for additional information. Also,-->
    <!--for custom resource retrieval beyond the scope of the existing implementation, ResourcePurgeServiceImpl can be subclassed-->
    <!--to provide custom resource retrieval functionality. Please see Quartz documentation for more advanced configuration,-->
    <!--such as clustering.-->

    <!--<bean id="purgeCartConfig" class="org.springframework.beans.factory.config.MapFactoryBean">-->
        <!--<property name="sourceMap">-->
            <!--<map>-->
                <!--<entry key="SECONDS_OLD" value="2592000"/>-->
                <!--<entry key="STATUS" value="IN_PROCESS"/>-->
            <!--</map>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCartJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="blResourcePurgeService" />-->
        <!--<property name="targetMethod" value="purgeCarts" />-->
        <!--<property name="arguments">-->
            <!--<list>-->
                <!--<ref bean="purgeCartConfig"/>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCartTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">-->
        <!--<property name="jobDetail" ref="purgeCartJobDetail" />-->
        <!--<property name="startDelay" value="30000" />-->
        <!--<property name="repeatInterval" value="86400000" />-->
    <!--</bean>-->

    <!--<bean id="purgeCustomerConfig" class="org.springframework.beans.factory.config.MapFactoryBean">-->
        <!--<property name="sourceMap">-->
            <!--<map>-->
                <!--<entry key="SECONDS_OLD" value="2592000"/>-->
                <!--<entry key="IS_REGISTERED" value="false"/>-->
            <!--</map>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCustomerJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="blResourcePurgeService" />-->
        <!--<property name="targetMethod" value="purgeCustomers" />-->
        <!--<property name="arguments">-->
            <!--<list>-->
                <!--<ref bean="purgeCustomerConfig"/>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCustomerTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">-->
        <!--<property name="jobDetail" ref="purgeCustomerJobDetail" />-->
        <!--<property name="startDelay" value="30000" />-->
        <!--<property name="repeatInterval" value="86400000" />-->
    <!--</bean>-->

    <!-- When the Private Demo starts up with DDL set to create or create-drop, we need to make sure that we -->
    <!-- rebuild the Solr index. Otherwise, it will be out of sync and cause errors for people. -->
    <bean id="rebuildIndexJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="blSearchService" />
        <property name="targetMethod" value="rebuildIndex" />
    </bean> 
    <bean id="rebuildIndexTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="rebuildIndexJobDetail" />
        <property name="startDelay" value="${solr.index.start.delay}" />
        <property name="repeatInterval" value="${solr.index.repeat.interval}" />
    </bean>
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="rebuildIndexTrigger" />
            </list>
        </property>
    </bean>
    
    <!--  Broaldeaf Commerce comes with an Image Server that allows you to manipulate images.   For example, the 
          demo includes a high resolution image for each product that is reduced in size for browsing operations -->
    <bean id="blStaticMapNamedOperations-site" class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="sourceMap">
            <map>
                <entry key="browse">
                    <map>
                        <entry key="resize-width-amount" value="400"/>
                        <entry key="resize-height-amount" value="400"/>
                        <entry key="resize-high-quality" value="false"/>
                        <entry key="resize-maintain-aspect-ratio" value="true"/>
                        <entry key="resize-reduce-only" value="true"/>
                    </map>
                </entry> 
                <entry key="thumbnail">
                    <map>
                        <entry key="resize-width-amount" value="60"/>
                        <entry key="resize-height-amount" value="60"/>
                        <entry key="resize-high-quality" value="false"/>
                        <entry key="resize-maintain-aspect-ratio" value="true"/>
                        <entry key="resize-reduce-only" value="true"/>
                    </map>
                </entry>  
            </map>
        </property>
    </bean>
    <bean class="org.broadleafcommerce.common.extensibility.context.merge.LateStageMergeBeanPostProcessor">
        <property name="collectionRef" value="blStaticMapNamedOperations-site" />
        <property name="targetRef" value="blStaticMapNamedOperations" />
    </bean>
    
    <!-- This is an example of a custom dialect definition that uses a custom processor hooked up to the blWebTemplateEngine-->
    <!-- Note that the same thing could be done for the blEmailTemplateEngine using the blEmailDialects -->
    <bean id="siteWebDialects" class="org.springframework.beans.factory.config.SetFactoryBean">
        <property name="sourceSet">
            <set>
                <bean class="nz.net.ultraq.thymeleaf.LayoutDialect" />
            </set>
        </property>
    </bean>
    <bean class="org.broadleafcommerce.common.extensibility.context.merge.LateStageMergeBeanPostProcessor">
        <property name="collectionRef" value="siteWebDialects" />
        <property name="targetRef" value="blWebDialects" />
    </bean>
    

    <!-- The following two beans are defined like this in Broadleaf Commerce. However, -->
    <!-- you may want to override the bean definitions by uncommenting these two beans -->
    <!-- to control whether or not templates are cacheable. This will generally be desireable -->
    <!-- in production environments, but likely not in development environments. -->
    <!-- 
    <bean id="blWebTemplateResolver" class="org.broadleafcommerce.presentation.resolver.BroadleafThemeAwareTemplateResolver">
        <property name="prefix" value="/WEB-INF/" />
        <property name="templateFolder" value="${theme.templates.folder}" />
        <property name="suffix" value=".html" />
        <property name="cacheable" value="${cache.page.templates}"/>
        <property name="cacheTTLMs" value="${cache.page.templates.ttl}" />
        <property name="characterEncoding" value="UTF-8" />
        <property name="order" value="200"/>
    </bean>
    <bean id="blEmailClasspathTemplateResolver" class="org.broadleafcommerce.presentation.resolver.BroadleafClasspathTemplateResolver">
        <property name="prefix" value="emailTemplates/" />
        <property name="suffix" value=".html" />
        <property name="cacheable" value="${cache.page.templates}"/>
        <property name="cacheTTLMs" value="${cache.page.templates.ttl}" />
        <property name="characterEncoding" value="UTF-8" />
        <property name="emailResolver" value="true" />
    </bean>
    -->
    
    <bean id="jsLocations" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>/js/</value>
            </list>
        </property>
    </bean>
    <bean class="org.broadleafcommerce.common.extensibility.context.merge.LateStageMergeBeanPostProcessor">
        <property name="collectionRef" value="jsLocations" />
        <property name="targetRef" value="blJsLocations" />
    </bean>
    
    <bean id="cssLocations" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>/css/</value>
            </list>
        </property>
    </bean>
    <bean class="org.broadleafcommerce.common.extensibility.context.merge.LateStageMergeBeanPostProcessor">
        <property name="collectionRef" value="cssLocations" />
        <property name="targetRef" value="blCssLocations" />
    </bean>

    <bean id="blJsResources" parent="siteJsResourceRequestHandlerBase" />

    <bean id="blCssResources" parent="siteCssResourceRequestHandlerBase" />
</beans>
