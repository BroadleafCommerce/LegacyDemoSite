<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.0.xsd">

    <task:annotation-driven />

    <bean id="blConfiguration" class="org.broadleafcommerce.common.config.RuntimeEnvironmentPropertiesConfigurer" />

    <!-- Set up Broadleaf messaging -->
    <bean id="messageSource" class="org.broadleafcommerce.common.util.BroadleafMergeResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>classpath:messages</value>
            </list>
        </property>
    </bean>
    
    <!-- Set up custom entity overrides. These are defined in core/src/main/resources -->
    <bean id="blMergedEntityContexts" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>classpath:applicationContext-entity.xml</value>
            </list>
        </property>
    </bean>
    
    <!-- Delete this bean to enable caching - leaving it on for development is recommended -->
    <!-- as it will allow changes made in the admin or directly on the database to be reflected -->
    <!-- immediately. However, caching is obviously beneficial in production. -->
    <bean id="blMergedCacheConfigLocations" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>classpath:bl-override-ehcache.xml</value>
            </list>
        </property>
    </bean>
    
    <!-- Delete this section to disable the embedded solr search service. Although this will result in a smaller -->
    <!-- application footprint, it will default the search service to use the database implementation, which  -->
    <!-- is slower and less full-featured. Broadleaf suggests maintaining this solr implementation in the vast -->
    <!-- majority of cases. -->
    <bean id="solrEmbedded" class="java.lang.String">
        <constructor-arg value="solrhome"/>
    </bean>

    <!--A simple quartz jobs for enabling cart and customer purge functionality. Uncomment the following quartz configurations-->
    <!--to activate this functionality (Also, uncomment the 'purgeCartTrigger' and 'purgeCustomerTrigger' configured under SchedulerFactoryBean.-->
    <!--Note, you can edit the configuration to customize the functionality. Take a look-->
    <!--at PurgeCartVariableNames and PurgeCustomerVariableNames for a list of available params and ResourcePurgeService for additional information. Also,-->
    <!--for custom resource retrieval beyond the scope of the existing implementation, ResourcePurgeServiceImpl can be subclassed-->
    <!--to provide custom resource retrieval functionality. Please see Quartz documentation for more advanced configuration,-->
    <!--such as clustering.-->

    <!--<bean id="purgeCartConfig" class="org.springframework.beans.factory.config.MapFactoryBean">-->
        <!--<property name="sourceMap">-->
            <!--<map>-->
                <!--<entry key="SECONDS_OLD" value="2592000"/>-->
                <!--<entry key="STATUS" value="IN_PROCESS"/>-->
            <!--</map>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCartJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="blResourcePurgeService" />-->
        <!--<property name="targetMethod" value="purgeCarts" />-->
        <!--<property name="arguments">-->
            <!--<list>-->
                <!--<ref bean="purgeCartConfig"/>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCartTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">-->
        <!--<property name="jobDetail" ref="purgeCartJobDetail" />-->
        <!--<property name="startDelay" value="30000" />-->
        <!--<property name="repeatInterval" value="86400000" />-->
    <!--</bean>-->

    <!--<bean id="purgeCustomerConfig" class="org.springframework.beans.factory.config.MapFactoryBean">-->
        <!--<property name="sourceMap">-->
            <!--<map>-->
                <!--<entry key="SECONDS_OLD" value="2592000"/>-->
                <!--<entry key="IS_REGISTERED" value="false"/>-->
            <!--</map>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCustomerJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="blResourcePurgeService" />-->
        <!--<property name="targetMethod" value="purgeCustomers" />-->
        <!--<property name="arguments">-->
            <!--<list>-->
                <!--<ref bean="purgeCustomerConfig"/>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="purgeCustomerTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">-->
        <!--<property name="jobDetail" ref="purgeCustomerJobDetail" />-->
        <!--<property name="startDelay" value="30000" />-->
        <!--<property name="repeatInterval" value="86400000" />-->
    <!--</bean>-->

    <!-- If you want to use a standalone solr server for at least one environment, uncomment the following -->
    <!-- two beans and set solr.source and solr.source.reindex in the property file for the environment -->
    <!-- to the URLs of the standalone server. NOTE: solr.url should point to the ROOT of the server, -->
    <!-- for example: http://localhost:8983/solr. solr.url.reindex should point to the reindex core, -->
    <!-- for example: http://localhost:8983/solr/reindex. The defaultCoreName property in solr.xml should -->
    <!-- point to the primary core. solr.source and solr.source.reindex should be set to solrServer and -->
    <!-- solrReindexServer, respectively. -->
    <!--     <bean id="solrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer"> -->
    <!--         <constructor-arg value="${solr.url}"/> -->
    <!--     </bean> -->
    <!--     <bean id="solrReindexServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer"> -->
    <!--         <constructor-arg value="${solr.url.reindex}"/> -->
    <!--     </bean> -->
    <bean id="blSearchService" class="org.broadleafcommerce.core.search.service.solr.SolrSearchServiceImpl">
        <constructor-arg name="solrServer" ref="${solr.source}" />
        <constructor-arg name="reindexServer" ref="${solr.source.reindex}" />
    </bean> 
    <bean id="rebuildIndexJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="blSearchService" />
        <property name="targetMethod" value="rebuildIndex" />
    </bean> 
    <bean id="rebuildIndexTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="rebuildIndexJobDetail" />
        <property name="startDelay" value="${solr.index.start.delay}" />
        <property name="repeatInterval" value="${solr.index.repeat.interval}" />
    </bean>
    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="rebuildIndexTrigger" />
                <!--<ref bean="purgeCartTrigger" />-->
                <!--<ref bean="purgeCustomerTrigger" />-->
            </list>
        </property>
    </bean>
    
    <!--  Broaldeaf Commerce comes with an Image Server that allows you to manipulate images.   For example, the 
          demo includes a high resolution image for each product that is reduced in size for browsing operations -->
    <bean id="blStaticMapNamedOperationComponent" class="org.broadleafcommerce.cms.file.service.operation.StaticMapNamedOperationComponent">
        <property name="namedOperations">
            <map>
                <entry key="browse">
                    <map>
                        <entry key="resize-width-amount" value="400"/>
                        <entry key="resize-height-amount" value="400"/>
                        <entry key="resize-high-quality" value="false"/>
                        <entry key="resize-maintain-aspect-ratio" value="true"/>
                        <entry key="resize-reduce-only" value="true"/>
                    </map>
                </entry> 
                <entry key="thumbnail">
                    <map>
                        <entry key="resize-width-amount" value="60"/>
                        <entry key="resize-height-amount" value="60"/>
                        <entry key="resize-high-quality" value="false"/>
                        <entry key="resize-maintain-aspect-ratio" value="true"/>
                        <entry key="resize-reduce-only" value="true"/>
                    </map>
                </entry>  
            </map>
        </property>
    </bean>    
    
    <!-- This is an example of a custom dialect definition that uses a custom processor -->
    <!-- The second bean registers the dialct to the blWebTemplateEngine -->
    <!-- Note that the same thing could be done for the blEmailTemplateEngine -->
    <!-- 
    <bean id="myDialect" class="com.mycompany.common.web.dialect.MyDialect">
        <property name="processors">
          <set>
            <bean class="com.mycompany.common.web.processor.MyProcessor" />
          </set>
        </property>     
    </bean> 
    <bean id="blWebTemplateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
        <property name="dialects">
            <set>
                <ref bean="myDialect" />
            </set>
        </property>
    </bean> 
    -->
    
    <!-- The following two beans are defined like this in Broadleaf Commerce. However, -->
    <!-- you may want to override the bean definitions by uncommenting these two beans -->
    <!-- to control whether or not templates are cacheable. This will generally be desireable -->
    <!-- in production environments, but likely not in development environments. -->
    <!-- 
    <bean id="blWebTemplateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
        <property name="prefix" value="/WEB-INF/templates/" />
        <property name="suffix" value=".html" />
        <property name="templateMode" value="HTML5" />
        <property name="cacheable" value="${cache.page.templates}"/>
        <property name="cacheTTLMs" value="${cache.page.templates.ttl}" />
        <property name="characterEncoding" value="UTF-8" />
    </bean> 
    <bean id="blEmailTemplateResolver" class="org.thymeleaf.templateresolver.ClassLoaderTemplateResolver">
        <property name="prefix" value="emailTemplates/" />
        <property name="suffix" value=".html" />
        <property name="templateMode" value="HTML5" />
        <property name="cacheable" value="${cache.page.templates}"/>
        <property name="cacheTTLMs" value="${cache.page.templates.ttl}" />
        <property name="characterEncoding" value="UTF-8" />
    </bean>
    -->
    
    <bean id="jsLocations" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>/js/</value>
            </list>
        </property>
    </bean>
    <bean class="org.broadleafcommerce.common.extensibility.context.merge.LateStageMergeBeanPostProcessor">
        <property name="collectionRef" value="jsLocations" />
        <property name="targetRef" value="blJsLocations" />
    </bean>
    
    <bean id="cssLocations" class="org.springframework.beans.factory.config.ListFactoryBean">
        <property name="sourceList">
            <list>
                <value>/css/</value>
            </list>
        </property>
    </bean>
    <bean class="org.broadleafcommerce.common.extensibility.context.merge.LateStageMergeBeanPostProcessor">
        <property name="collectionRef" value="cssLocations" />
        <property name="targetRef" value="blCssLocations" />
    </bean>
    
    <bean id="blJsResources" class="org.broadleafcommerce.common.web.resource.BroadleafResourceHttpRequestHandler">
        <property name="locations" ref="blJsLocations"/>
        <property name="handlers" ref="blJsHandlers" />
    </bean>
    
    <bean id="blCssResources" class="org.broadleafcommerce.common.web.resource.BroadleafResourceHttpRequestHandler">
        <property name="locations" ref="blCssLocations"/>
        <property name="handlers" ref="blCssHandlers" />
    </bean>
</beans>
