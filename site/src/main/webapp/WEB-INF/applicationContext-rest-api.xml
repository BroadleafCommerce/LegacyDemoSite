<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
        http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-3.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
    
    <!-- Add this file to the patchConfigLocation contextParam in the web.xml file to activate RESTful 
         web services. Also, ensure that the RESTApiServlet and servlet mapping are uncommented and/or configured 
         in web.xml. -->
    
    <!-- Scan for custom REST endpoints -->
    <context:component-scan base-package="com.mycompany.api" />
    
    <!-- Set up Spring security for the RESTful API -->
    <sec:http pattern="/api/**" create-session="stateless">
        <sec:http-basic />
        <sec:custom-filter ref="blRestPreSecurityFilterChain" before="CHANNEL_FILTER"/>
        <sec:custom-filter ref="blRestCustomerStateFilter" after="REMEMBER_ME_FILTER"/>
        <sec:custom-filter ref="blRestPostSecurityFilterChain" after="SWITCH_USER_FILTER"/>
    </sec:http>
    
    <!-- Used for REST api calls.   This just takes in the passed in customerId and uses it to establish the customer. -->
    <!-- Additional considerations MUST be made for implementations that are allowing external access to APIs. -->
    <bean id="blRestCustomerStateFilter" class="org.broadleafcommerce.profile.web.core.security.RestApiCustomerStateFilter"/>
    
    <!-- This adds (optional) support for serializing and deserializing Broadleaf extensions.  This can be commented out, especially if specifying 
         custom endpoint method signatures. If you've extended BLC API wrapper classes, then class does it's best to serialize the right information.  
         Deserialization does not always work, especially when polymorphic possibilities are involved.  In these cases, it is best to explicitly provide 
         specific method signatures (URIs) for each polymorphic type that will be deserialized.
         This MUST be marked as singleton. -->
    <bean class="org.broadleafcommerce.core.web.api.BroadleafMessageBodyReaderWriter" scope="singleton"/>
    
    <!-- This generic JAX-RS exception mapper can be commented out, and/or can be replaced with a custom 
         exception mapper or mappers.
         This MUST be marked as singleton. -->
    <bean class="org.broadleafcommerce.core.web.api.BroadleafRestExceptionMapper" scope="singleton"/>
    
</beans>