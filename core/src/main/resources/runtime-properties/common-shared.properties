# ######################################## #
# OVERVIEW - How the properties files work #
# ######################################## #
# When the application starts up, Broadleaf provides a mechanism to merge and override properties files based
# on the current environment that is being used. Broadleaf will look in the classpath for the following files,
# in order, to merge (later files override earlier files if two properties collide):
#
# common-shared.properties (in the core project)
# [specific-environment]-shared.properties (in the core project)
# common.properties (in either site or admin project, depending on which app is starting)
# [specific-environment].properties (in either site or admin project, depending on which app is starting)
# -Dproperty-override-shared specified value, if any
# -Dproperty-override specified value, if any

# ############################################# #
# EMAILS - Settings for system generated emails #
# ############################################# #

site.emailAddress=customerservice@heatclinic.com

# ####################################### #
# ANALYTICS - Google Analytics Properties #
# ####################################### #
# Override to set your googleAnalytics Id. This is a global setting and is unchangeable via the database System Properties.
# Suitable if you have multiple sites in the same domain and you want all traffic to go to this master as well as each
# individual site's webPropertyId
# Sites may want to setup IDs for QA and production
googleAnalytics.masterWebPropertyId=UA-XXXXXXX-X

# Can be used in conjunction with the masterWebPropertyId to provide a more site-specific tracker that can be overridden
# via database System Properties. In a single-site scenario you would typically only modify 1 or the other. If both are set
# them multiple trackers appear on the page. This might also be suitable if you have 2 analytics accounts that you want to
# capture traffic for.
googleAnalytics.webPropertyId=

#Used in _addTrans to specify the site that the transaction is for. Could be used in a multi-site scenario
#where multiple sites feed into the same Google Analytics account and you want to keep track of where the
#transactions actually come from
googleAnalytics.affiliation=

# Enhanced link attribution to deal with things like button clicks or when a single page element has multiple destinations.
# See https://support.google.com/analytics/answer/2558867?hl=en&utm_id=ad for more information. Defaults to true.
googleAnalytics.enableLinkAttribution=true

# Used in conjunction with ads being displayed on your site, allows further analytics to take place for proper ad targeting.
# See https://support.google.com/analytics/answer/3450482 for more information. Defaults to false.
googleAnalytics.enableDisplayAdvertising=false


# ############################################ #
# CONTENT MANAGEMENT - Asset Server Properties #
# ############################################ #

# Prefix used to indicate the url represents an asset being managed by the CMS.
asset.server.url.prefix.internal=cmsstatic
# When serving custom Pages or Structured Content fields, the url prefix defined
# above will be replaced with the string below.   This is useful for sites
# that have a separate image domain or use a CDN to render images.   This works well
# with CMS's that own the image part of your domain CNAME
#asset.server.url.prefix=http://localhost:8080/cmsstatic
asset.server.url.prefix=

# If left blank, the system will use the non secure url and replace the http with
# https.
asset.server.url.prefix.secure=

# prefix in front of all urls that hit your storefront from the admin. This is useful
# when the storefront is located on a different server from the admin (e.g. http://storefront:8080/)
store.front.webapp.prefix=http://localhost:8080/

# ##################################### #
# DATABASE - Database Server Properties #
# ##################################### #

# Settings for the default persistence unit
blPU.hibernate.hbm2ddl.auto=validate
blPU.hibernate.dialect=org.hibernate.dialect.HSQLDialect
blPU.hibernate.show_sql=false
blPU.hibernate.cache.use_second_level_cache=true
blPU.hibernate.cache.use_query_cache=true
blPU.hibernate.hbm2ddl.import_files=null
# Settings for the CMS storage persistence unit
blCMSStorage.hibernate.hbm2ddl.auto=validate
blCMSStorage.hibernate.dialect=org.hibernate.dialect.HSQLDialect
blCMSStorage.hibernate.show_sql=false
blCMSStorage.hibernate.cache.use_second_level_cache=true
blCMSStorage.hibernate.cache.use_query_cache=true
blCMSStorage.hibernate.hbm2ddl.import_files=null
# Settings for the secure persistence unit
blSecurePU.hibernate.hbm2ddl.auto=validate
blSecurePU.hibernate.dialect=org.hibernate.dialect.HSQLDialect
blSecurePU.hibernate.show_sql=false
blSecurePU.hibernate.cache.use_second_level_cache=false
blSecurePU.hibernate.cache.use_query_cache=false
blSecurePU.hibernate.hbm2ddl.import_files=null

auto.correct.sequence.generator.inconsistencies=true

# ##################################### #
# Thymeleaf View Resolver               #
# ##################################### #

thymeleaf.view.resolver.cache=true

